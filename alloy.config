// Alloy Configuration for C# Loki Demo
// This config handles file-based, direct HTTP, and Windows Event Log ingestion
// All logs are forwarded to Grafana Cloud Loki

// =============================================================================
// FILE-BASED LOGGING (Option 1)
// =============================================================================
// Uses local.file_match to discover log files with wildcard patterns
// This allows Alloy to automatically pick up rolling log files (e.g., csharp-demo20250630.log)
local.file_match "csharp_demo_files" {
  path_targets = [{ __path__ = "C:\\GrafanaLogs\\csharp-demo*.log", job = "csharp-demo", host = "Erik", method = "file-based" }]
  sync_period  = "5s"  // How often to check for new files
}

// Reads logs from the discovered files and forwards them to Grafana Cloud
loki.source.file "csharp_demo_file" {
  targets    = local.file_match.csharp_demo_files.targets
  forward_to = [loki.write.cloud.receiver]
}

// =============================================================================
// DIRECT HTTP LOGGING (Option 2)
// =============================================================================
// Accepts logs directly from the C# app via HTTP POST to /loki/api/v1/push
// The C# app sends logs to http://localhost:1337/loki/api/v1/push
loki.source.api "csharp_demo_http" {
  http {
    listen_address = "0.0.0.0"  // Listen on all network interfaces
    listen_port    = 1337        // Port for HTTP log ingestion
  }
  
  forward_to = [loki.write.cloud.receiver]
}

// =============================================================================
// WINDOWS EVENT LOG INGESTION (Option 3)
// =============================================================================
// Reads from Windows Event Log and forwards to Grafana Cloud
// Filters for events from our specific source (LokiDemoApp)
loki.source.windowsevent "windows_events" {
  forward_to             = [loki.write.cloud.receiver]
  exclude_event_data     = true   // Exclude verbose event data, keep only essential fields
  eventlog_name          = "Application"  // Windows Event Log to read from
  use_incoming_timestamp = true   // Use the original event timestamp
  labels                 = {
    job   = "windows-events",
    host  = "Erik",
    source = "event-viewer",
  }
  xpath_query   = "*[System[Provider[@Name='LokiDemoApp']]]"  // Filter for our app's events
}

// =============================================================================
// LOG RELABELING AND ENRICHMENT
// =============================================================================
// Adds common labels to all logs before sending to Grafana Cloud
// This helps with filtering and organizing logs in Grafana
loki.relabel "add_common_labels" {
  forward_to = [loki.write.cloud.receiver]
  
  rule {
    target_label = "environment"
    replacement  = "development"
  }
  
  rule {
    target_label = "team"
    replacement  = "demo-team"
  }
  
  rule {
    target_label = "application"
    replacement  = "loki-demo"
  }
}

// =============================================================================
// LOG FILTERING (Optional)
// =============================================================================
// Uncomment to filter out certain log levels or operations
// Useful for reducing noise in production environments
// 
// loki.relabel "filter_logs" {
//   forward_to = [loki.relabel.add_common_labels.receiver]
//   
//   // Keep only logs with specific labels
//   rule {
//     source_labels = ["level"]
//     regex         = "(error|warn|info)"
//     action        = "keep"
//   }
//   
//   // Drop debug logs in production
//   rule {
//     source_labels = ["level"]
//     regex         = "debug"
//     action        = "drop"
//   }
// }

// =============================================================================
// RATE LIMITING (Optional)
// =============================================================================
// Uncomment to limit the rate of logs sent to Grafana Cloud
// Useful for controlling costs and preventing overwhelming the destination
// 
// loki.limiter "rate_limit" {
//   forward_to = [loki.relabel.add_common_labels.receiver]
//   rate       = 1000  // Maximum logs per second
//   burst      = 2000  // Maximum burst size
// }

// =============================================================================
// GRAFANA CLOUD LOKI WRITE (Common for all methods)
// =============================================================================
// Sends all processed logs to Grafana Cloud Loki
// Uses basic authentication with your Grafana Cloud credentials
loki.write "cloud" {
  endpoint {
    url = "https://logs-prod-025.grafana.net/loki/api/v1/push"
    basic_auth {
      username = "YOUR_USERNAME"
      password = "YOUR_PASSWORD"
    }
  }
  
  // Optional: Configure retry behavior
  external_labels = {
    cluster = "demo-cluster"
    region  = "eu-north"
  }
  
  // Optional: Configure WAL (Write-Ahead Log) for reliability
  wal {
    dir = "data/wal"
  }
}

// =============================================================================
// MONITORING AND METRICS (Optional)
// =============================================================================
// Expose metrics about log processing for monitoring
// Useful for tracking log volume, errors, and performance
// 
// prometheus.exporter.self "alloy_metrics" {
//   include_all_jobs = true
// }
// 
// prometheus.remote_write "metrics" {
//   endpoint {
//     url = "YOUR_METRICS_ENDPOINT"
//     basic_auth {
//       username = "YOUR_USERNAME"
//       password = "YOUR_PASSWORD"
//     }
//   }
// }

// =============================================================================
// CONFIGURATION NOTES
// =============================================================================
// 
// 1. Update the forward_to references if you enable filtering or rate limiting:
//    - Change forward_to = [loki.write.cloud.receiver] to 
//    - forward_to = [loki.relabel.add_common_labels.receiver]
// 
// 2. For production, consider:
//    - Enabling log filtering to reduce noise
//    - Adding rate limiting to control costs
//    - Setting up monitoring and alerting
//    - Using environment variables for sensitive credentials
// 
// 3. File paths:
//    - Ensure the file path matches your C# app's logFilePath in config.json
//    - Use wildcards (*) to match rolling log files
//    - Adjust sync_period based on your log volume
// 
// 4. Windows Event Log:
//    - The xpath_query filters for events from your specific source
//    - Change "LokiDemoApp" to match your eventLogSource in config.json
//    - Consider adding more specific filters for production use 